/*
 *This is generated by J2Swift, donot modify 
 */


import Foundation

public class JavaBoolean : JavaObject, JavaSerializable, JavaComparable {
  private let value:jboolean

  private static let serialVersionUID:jlong = -3665804199014368530
  public static let TYPE:JavaClass? = ([jboolean].getClass().getComponentType())
  public static let TRUE_:JavaBoolean? = JavaBoolean(withjboolean: true)
  public static let FALSE_:JavaBoolean? = JavaBoolean(withjboolean: false)


  public convenience init(withString string:String?)  {
    self.init(withjboolean: JavaBoolean.parseBoolean(string))
  }

  public init(withjboolean value:jboolean)  {
    self.value = value
    
    super.init()
  }

  public func booleanValue() ->jboolean  {
    return value
  }

  public override func equals(o:JavaObject?) ->jboolean  {
    return o == self || o is JavaBoolean && (o as! JavaBoolean).value == value
  }

  public func compareTo(that:JavaBoolean?) ->jint  {
    return JavaBoolean.compare(value,that!.value)
  }

  public static func compare(lhs:jboolean, _ rhs:jboolean) ->jint  {
    return lhs == rhs ? 0 : lhs ? 1 : -1
  }

  public override func hashCode() ->jint  {
    return value ? 1231 : 1237
  }

  public override func toString() ->String?  {
    return String.valueOf(value)
  }

  public static func getBoolean(string:String?) ->jboolean  {
    if (string == nil || string!.length() == 0) {
      return false
    }
    return JavaBoolean.parseBoolean(JavaSystem.getProperty(string))
  }

  public static func parseBoolean(s:String?) ->jboolean  {
    return "true".equalsIgnoreCase(s)
  }

  public static func toString(value:jboolean) ->String?  {
    return String.valueOf(value)
  }

  public static func valueOf(string:String?) ->JavaBoolean?  {
    return JavaBoolean.parseBoolean(string) ? JavaBoolean.TRUE_ : JavaBoolean.FALSE_
  }

  public static func valueOf(b:jboolean) ->JavaBoolean?  {
    return b ? JavaBoolean.TRUE_ : JavaBoolean.FALSE_
  }


}
